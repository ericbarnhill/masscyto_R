NeutroA<-subset(dat2,Cell_Type=="Neutrophils" & Statistic=="Mean" & Parameter=="Area")
monoE<-subset(dat2,Cell_Type=="Monocytes" & Statistic=="Mean"  & Parameter=="Deformation")
NeutroD<-subset(dat2,Cell_Type=="Neutrophils" & Statistic=="Mean" & Parameter=="Deformation")
MonoE$Parameter<-factor(MonoE$Parameter)
NeutroE$Parameter<-factor(NeutroE$Parameter)
MonoA$Parameter<-factor(MonoA$Parameter)
NeutroA$Parameter<-factor(NeutroA$Parameter)
monoE$Parameter<-factor(monoE$Parameter)
NeutroD$Parameter<-factor(NeutroD$Parameter)
priors_normal <- c(set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 1)", class = "b"),
set_prior("normal(0, 1)", class = "sd"),
set_prior("normal(0, 1)", class = "sigma"),set_prior("lkj(2)", class = "cor")
)
priors_cauchy <- c(set_prior("cauchy(0, 10)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "b"),
set_prior("cauchy(0, 1)", class = "sd"),
set_prior("cauchy(0, 1)", class = "sigma"),set_prior("lkj(2)", class = "cor")
)
mMonoA <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = MonoA, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mMonoApost<-posterior_samples(mMonoA, "^b")
#dim(mMonoApost)
(Dot_CMonoA<-round(mean(mMonoApost[,2]>0),2))
(Mag_DotMonoA<-round(mean(mMonoApost[,3]>0),2))
(Gad_MagMonoA<-round(mean(mMonoApost[,4]>0),2))
(GdCl3_GadMonoA<-round(mean(mMonoApost[,5]>0),2))
stanplot(mMonoA, type="hist",pars=c("^b","^sd","sigma"))
mNeutroA <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = NeutroA, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mNeutroApost<-posterior_samples(mNeutroA, "^b")
(Dot_CNeutroA<-round(mean(mNeutroApost[,2]>0),2))
(Mag_DotNeutroA<-round(mean(mNeutroApost[,3]>0),2))
(Gad_MagNeutroA<-round(mean(mNeutroApost[,4]>0),2))
(GdCl3_GadNeutroA<-round(mean(mNeutroApost[,5]>0),2))
stanplot(mNeutroA, type="hist",pars=c("^b","^sd","sigma"))
mMonoD <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = monoD, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
knitr::opts_chunk$set(echo = TRUE)
library(brms)
theme_set(theme_default())
dat<-read.table("rtdc.txt",header=TRUE)
unique(dat$Subject)
summary(dat)
## labeling is odd because each contrast agent has two labels, control and treatment, whereas control agent is by definition a single level:
xtabs(~Contrast_Agent+Protocol,dat)
controlrows<-dat[which(dat$Protocol=="Control"),]
trtmtrows<-dat[which(dat$Protocol!="Control"),]
#trtmtrows$Contrast_Agent
summary(trtmtrows)
summary(controlrows)
controlrows$Agent<-factor("Control")
trtmtrows$Agent<-trtmtrows$Contrast_Agent
dat2<-rbind(controlrows,trtmtrows)
summary(dat2)
## relevel factors:
dat2$Agent<-factor(dat2$Agent,levels=c("Control","Dotarem","Magnevist","Gadovist","GdCl3"))
## treatment contrasts:
contrasts(dat2$Agent)
library(MASS)
## sliding contrasts:
contrasts(dat2$Agent)<-contr.sdif(5)
contrasts(dat2$Agent)
## Do the contrast coding manually:
dat2$Dot_C<-ifelse(dat2$Agent=="Control",-1,ifelse(dat2$Agent=="Dotarem",1,0))
dat2$Mag_Dot<-ifelse(dat2$Agent=="Dotarem",-1,ifelse(dat2$Agent=="Magnevist",1,0))
dat2$Gad_Mag<-ifelse(dat2$Agent=="Magnevist",-1,ifelse(dat2$Agent=="Gadovist",1,0))
dat2$GdCl3_Gad<-ifelse(dat2$Agent=="Gadovist",-1,ifelse(dat2$Agent=="GdCl3",1,0))
## separate data by cell type:
MonoE<-subset(dat2,Cell_Type=="Monocytes" & Statistic=="Mean"  & Parameter=="E")
NeutroE<-subset(dat2,Cell_Type=="Neutrophils" & Statistic=="Mean" & Parameter=="E")
MonoA<-subset(dat2,Cell_Type=="Monocytes" & Statistic=="Mean"  & Parameter=="Area")
NeutroA<-subset(dat2,Cell_Type=="Neutrophils" & Statistic=="Mean" & Parameter=="Area")
MonoD<-subset(dat2,Cell_Type=="Monocytes" & Statistic=="Mean"  & Parameter=="Deformation")
NeutroD<-subset(dat2,Cell_Type=="Neutrophils" & Statistic=="Mean" & Parameter=="Deformation")
MonoE$Parameter<-factor(MonoE$Parameter)
NeutroE$Parameter<-factor(NeutroE$Parameter)
MonoA$Parameter<-factor(MonoA$Parameter)
NeutroA$Parameter<-factor(NeutroA$Parameter)
MonoD$Parameter<-factor(monoE$Parameter)
NeutroD$Parameter<-factor(NeutroD$Parameter)
priors_normal <- c(set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 1)", class = "b"),
set_prior("normal(0, 1)", class = "sd"),
set_prior("normal(0, 1)", class = "sigma"),set_prior("lkj(2)", class = "cor")
)
priors_cauchy <- c(set_prior("cauchy(0, 10)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "b"),
set_prior("cauchy(0, 1)", class = "sd"),
set_prior("cauchy(0, 1)", class = "sigma"),set_prior("lkj(2)", class = "cor")
)
mMonoA <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = MonoA, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mMonoApost<-posterior_samples(mMonoA, "^b")
#dim(mMonoApost)
(Dot_CMonoA<-round(mean(mMonoApost[,2]>0),2))
(Mag_DotMonoA<-round(mean(mMonoApost[,3]>0),2))
(Gad_MagMonoA<-round(mean(mMonoApost[,4]>0),2))
(GdCl3_GadMonoA<-round(mean(mMonoApost[,5]>0),2))
stanplot(mMonoA, type="hist",pars=c("^b","^sd","sigma"))
mNeutroA <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = NeutroA, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mNeutroApost<-posterior_samples(mNeutroA, "^b")
(Dot_CNeutroA<-round(mean(mNeutroApost[,2]>0),2))
(Mag_DotNeutroA<-round(mean(mNeutroApost[,3]>0),2))
(Gad_MagNeutroA<-round(mean(mNeutroApost[,4]>0),2))
(GdCl3_GadNeutroA<-round(mean(mNeutroApost[,5]>0),2))
stanplot(mNeutroA, type="hist",pars=c("^b","^sd","sigma"))
mMonoD <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = MonoD, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mMonoDpost<-posterior_samples(mMonoD, "^b")
#dim(mMonoDpost)
(Dot_CmonoD<-round(mean(mMonoDpost[,2]>0),2))
(Mag_DotmonoD<-round(mean(mMonoDpost[,3]>0),2))
(Gad_MagmonoD<-round(mean(mMonoDpost[,4]>0),2))
(GdCl3_GadmonoD<-round(mean(mMonoDpost[,5]>0),2))
stanplot(mMonoD, type="hist",pars=c("^b","^sd","sigma"))
mNeutroD <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = NeutroD, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mNeutroDpost<-posterior_samples(mNeutroD, "^b")
(Dot_CNeutroD<-round(mean(mNeutroDpost[,2]>0),2))
(Mag_DotNeutroD<-round(mean(mNeutroDpost[,3]>0),2))
(Gad_MagNeutroD<-round(mean(mNeutroDpost[,4]>0),2))
(GdCl3_GadNeutroD<-round(mean(mNeutroDpost[,5]>0),2))
stanplot(mNeutroD, type="hist",pars=c("^b","^sd","sigma"))
mMonoE <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = MonoE, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mMonoEpost<-posterior_samples(mMonoE, "^b")
#dim(mMonoEpost)
(Dot_CmonoE<-round(mean(mMonoEpost[,2]>0),2))
(Mag_DotmonoE<-round(mean(mMonoEpost[,3]>0),2))
(Gad_MagmonoE<-round(mean(mMonoEpost[,4]>0),2))
(GdCl3_GadmonoE<-round(mean(mMonoEpost[,5]>0),2))
stanplot(mMonoE, type="hist",pars=c("^b","^sd","sigma"))
mNeutroE <- brm(formula = Value ~ Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad+ (1+Dot_C+Mag_Dot +Gad_Mag+GdCl3_Gad | Subject),
data = NeutroE, family = gaussian(), prior = priors_cauchy,
iter = 2000, chains = 4, control = list(adapt_delta = 0.99))
## posteriors
mNeutroEpost<-posterior_samples(mNeutroE, "^b")
(Dot_CneutroE<-round(mean(mNeutroEpost[,2]>0),2))
(Mag_DotneutroE<-round(mean(mNeutroEpost[,3]>0),2))
(Gad_MagneutroE<-round(mean(mNeutroEpost[,4]>0),2))
(GdCl3_GadneutroE<-round(mean(mNeutroEpost[,5]>0),2))
stanplot(mNeutroE, type="hist",pars=c("^b","^sd","sigma"))
PROJ_DIR = "/home/ericbarnhill/Documents/code/R/masscyto_R"
XL_PATH <- file.path(PROJ_DIR, "rt-dc_eb_2.xls")
knitr::opts_chunk$set(root.dir = PROJ_DIR)
setwd(PROJ_DIR)
packages <- c("gdata","tidyr","dplyr","magrittr", "ggplot2")
lapply(packages, require, character.only = T)
load_data <- function(path) {
col_names <- c(
"Subject",
"Date",
"Unique_ID",
"Cell_Type",
"Contrast_Agent",
"Protocol",
"Parameter",
"Statistic",
"Value"
)
param_names <- c(rep("Area",4), rep("Deformation",4), rep("E",4))
stat_names <- rep(c("Mean", "SD", "5%", "95%"),3)
n_sheets = gdata::sheetCount(XL_PATH)
sheet_names <- gdata::sheetNames(XL_PATH)
rtdc = list(length=n_sheets-1)
for (s in 1:n_sheets) {
sheet = read.xls(XL_PATH, header=T, sheet = s, stringsAsFactors = F)
# get Cell_Type and Contrast_Agent
sheetname_split <- unlist(strsplit(sheet_names[s], "_"))
cell_type <- rep(sheetname_split[2], nrow(sheet))
cont_ag <- rep(sheetname_split[1], nrow(sheet))
# fix bad spelling
cell_type <- unname(sapply(cell_type, function(x) {ifelse(x == "Neuthrophils", "Neutrophils", x)}))
# get Date, Subject, Protocol (control or treatment)
date_subj_prot <- t(sapply(sheet[,1], function(x) {
split_list <- unlist(strsplit(x, "_"))
dates <- split_list[1]
subj <- split_list[2]
prot <- split_list[3]
date_subj_prot <- unname(cbind(dates,subj,prot))
}))
# split subject from protocol
date_subj_prot <- date_subj_prot %>%
unname %>%
as.data.frame %>%
set_colnames(c("date", "subj", "prot"))
date <- date_subj_prot$date
subj <- as.character(date_subj_prot$subj)
prot <- as.character(clean_prots(date_subj_prot$prot))
# split Date from colon
date <- sapply(date, function(x) {
split_date <- unlist(strsplit(as.character(x), ' '))
if (length(split_date) > 1) {
date = split_date[2]
}
})
# make unique ID
uniqueID <- unname(mapply(FUN=function(x,y,z,t){paste0(x,y,z,t)},
as.character(subj), as.character(date), as.character(cell_type), as.character(cont_ag)))
# bind sheet of clean labels, make tall format
sheet_clean_labels <- cbind(subj, date, uniqueID, cell_type, cont_ag, prot)
n_vals <- ncol(sheet) - 1
labels_tall <- sheet_clean_labels[rep(1:nrow(sheet_clean_labels), each=n_vals),]
# convert values to tall format
values_tall <- apply(X = sheet[,2:ncol(sheet)], MARGIN = 1, FUN = function(rw) {
n_vals <- length(rw)
vals_tall <- rbind(param_names, stat_names, as.vector(rw))
})
# somehow this works
values_tall <- t(matrix(values_tall,3,length(values_tall)/3))
# bind tall labels and tall values
data_tall <- cbind(labels_tall, values_tall)
data_tall[,-nrow(data_tall)] <- as.character(data_tall[,-nrow(data_tall)])
colnames(data_tall) <- col_names
rtdc[[s]] <- as.data.frame(data_tall, stringsAsFactors = FALSE)
}
rtdc <-do.call(rbind, rtdc)
cols_to_factor = colnames(rtdc)[-ncol(data_tall)]
rtdc[cols_to_factor] <- lapply(rtdc[cols_to_factor], function(x) {factor(unlist(x))})
rtdc$Value <- as.numeric(rtdc$Value)
rownames(rtdc) <- c()
return(rtdc)
}
clean_prots <- function(prots_raw) {
control_entries <- c("Control", "control", "cntl", "Contrl", "ctl", "Ctrol", "cotrl", "Ctrl", "Ctr", "Cntrol", "cotnrol",
"control-", "Control2")
#gdcl3_entries <- c("GdCl3")
#gadovist_entries <- c("Gadovist", "Gadov")
#dotarem_entries <- c("Dotarem", "Dota")
#magnevist_entries <- c("Magnevist", "Magnevist_I", "Magnevist_II", "Magnevist_III")
prots <- sapply(as.character(prots_raw), function(x) {
x_split_1 <- unlist(strsplit(x, " "))
x_split_2 <- unlist(strsplit(x_split_1[1], "-"))
x <- x_split_2[1]
if (x %in% control_entries) {
x <- "Control"
} else {
x <- "Treatment"
}
#} else if (x %in% gadovist_entries) {
#    x <- "Gadovist"
#} else if (x %in% dotarem_entries) {
#    x <- "Dotarem"
#} else if (x %in% magnevist_entries) {
#    x <- "Magnevist"
#} else if (x %in% gdcl3_entries) {
#    x <- "GdCl3"
#} else {
#    print("ERROR: entry not labeled properly as control or contrast agent")
#}
return(x)
})
prots_2 <- prots %>%
as.factor %>%
unname
return(prots_2)
}
rtdc <- load_data(XL_PATH)
rtdc_subset <- subset(rtdc, Parameter == "E" & Statistic == "Mean")
rtdc_wide <- spread(data = rtdc_subset, key = Protocol, value=Value)
plt <- ggplot(rtdc_wide) +
geom_point(aes(x=Control,y=Treatment,col=Subject)) +
ggtitle("Mean Young's Modulus")
print(plt)
rtdc_subset %>% summary
print(subset(rtdc_subset, Subject='AngelaS'))
print(subset(rtdc_subset, Subject=='AngelaS'))
PROJ_DIR = "/home/ericbarnhill/Documents/code/R/masscyto_R"
XL_PATH <- file.path(PROJ_DIR, "rt-dc_eb_2.xls")
knitr::opts_chunk$set(root.dir = PROJ_DIR)
setwd(PROJ_DIR)
packages <- c("gdata","tidyr","dplyr","magrittr", "ggplot2")
lapply(packages, require, character.only = T)
load_data <- function(path) {
col_names <- c(
"Subject",
"Date",
"Unique_ID",
"Cell_Type",
"Contrast_Agent",
"Protocol",
"Parameter",
"Statistic",
"Value"
)
param_names <- c(rep("Area",4), rep("Deformation",4), rep("E",4))
stat_names <- rep(c("Mean", "SD", "5%", "95%"),3)
n_sheets = gdata::sheetCount(XL_PATH)
sheet_names <- gdata::sheetNames(XL_PATH)
rtdc = list(length=n_sheets-1)
for (s in 1:n_sheets) {
sheet = read.xls(XL_PATH, header=T, sheet = s, stringsAsFactors = F)
# get Cell_Type and Contrast_Agent
sheetname_split <- unlist(strsplit(sheet_names[s], "_"))
cell_type <- rep(sheetname_split[2], nrow(sheet))
cont_ag <- rep(sheetname_split[1], nrow(sheet))
# fix bad spelling
cell_type <- unname(sapply(cell_type, function(x) {ifelse(x == "Neuthrophils", "Neutrophils", x)}))
# get Date, Subject, Protocol (control or treatment)
date_subj_prot <- t(sapply(sheet[,1], function(x) {
split_list <- unlist(strsplit(x, "_"))
dates <- split_list[1]
subj <- split_list[2]
prot <- split_list[3]
date_subj_prot <- unname(cbind(dates,subj,prot))
}))
# split subject from protocol
date_subj_prot <- date_subj_prot %>%
unname %>%
as.data.frame %>%
set_colnames(c("date", "subj", "prot"))
date <- date_subj_prot$date
subj <- as.character(date_subj_prot$subj)
prot <- as.character(clean_prots(date_subj_prot$prot))
# fix two representations for Angela
subj <- unname(sapply(subj, function(x) {ifelse(x == "AAS", "AngelaS", x)}))
# split Date from colon
date <- sapply(date, function(x) {
split_date <- unlist(strsplit(as.character(x), ' '))
if (length(split_date) > 1) {
date = split_date[2]
}
})
# make unique ID
uniqueID <- unname(mapply(FUN=function(x,y,z,t){paste0(x,y,z,t)},
as.character(subj), as.character(date), as.character(cell_type), as.character(cont_ag)))
# bind sheet of clean labels, make tall format
sheet_clean_labels <- cbind(subj, date, uniqueID, cell_type, cont_ag, prot)
n_vals <- ncol(sheet) - 1
labels_tall <- sheet_clean_labels[rep(1:nrow(sheet_clean_labels), each=n_vals),]
# convert values to tall format
values_tall <- apply(X = sheet[,2:ncol(sheet)], MARGIN = 1, FUN = function(rw) {
n_vals <- length(rw)
vals_tall <- rbind(param_names, stat_names, as.vector(rw))
})
# somehow this works
values_tall <- t(matrix(values_tall,3,length(values_tall)/3))
# bind tall labels and tall values
data_tall <- cbind(labels_tall, values_tall)
data_tall[,-nrow(data_tall)] <- as.character(data_tall[,-nrow(data_tall)])
colnames(data_tall) <- col_names
rtdc[[s]] <- as.data.frame(data_tall, stringsAsFactors = FALSE)
}
rtdc <-do.call(rbind, rtdc)
cols_to_factor = colnames(rtdc)[-ncol(data_tall)]
rtdc[cols_to_factor] <- lapply(rtdc[cols_to_factor], function(x) {factor(unlist(x))})
rtdc$Value <- as.numeric(rtdc$Value)
rownames(rtdc) <- c()
return(rtdc)
}
clean_prots <- function(prots_raw) {
control_entries <- c("Control", "control", "cntl", "Contrl", "ctl", "Ctrol", "cotrl", "Ctrl", "Ctr", "Cntrol", "cotnrol",
"control-", "Control2")
#gdcl3_entries <- c("GdCl3")
#gadovist_entries <- c("Gadovist", "Gadov")
#dotarem_entries <- c("Dotarem", "Dota")
#magnevist_entries <- c("Magnevist", "Magnevist_I", "Magnevist_II", "Magnevist_III")
prots <- sapply(as.character(prots_raw), function(x) {
x_split_1 <- unlist(strsplit(x, " "))
x_split_2 <- unlist(strsplit(x_split_1[1], "-"))
x <- x_split_2[1]
if (x %in% control_entries) {
x <- "Control"
} else {
x <- "Treatment"
}
#} else if (x %in% gadovist_entries) {
#    x <- "Gadovist"
#} else if (x %in% dotarem_entries) {
#    x <- "Dotarem"
#} else if (x %in% magnevist_entries) {
#    x <- "Magnevist"
#} else if (x %in% gdcl3_entries) {
#    x <- "GdCl3"
#} else {
#    print("ERROR: entry not labeled properly as control or contrast agent")
#}
return(x)
})
prots_2 <- prots %>%
as.factor %>%
unname
return(prots_2)
}
rtdc <- load_data(XL_PATH)
rtdc_subset <- subset(rtdc, Parameter == "E" & Statistic == "Mean")
rtdc_wide <- spread(data = rtdc_subset, key = Protocol, value=Value)
plt <- ggplot(rtdc_wide) +
geom_point(aes(x=Control,y=Treatment,col=Subject)) +
ggtitle("Mean Young's Modulus")
print(plt)
rtdc_subset <- subset(rtdc, Parameter == "E" & Statistic == "Mean")
rtdc_wide <- spread(data = rtdc_subset, key = Protocol, value=Value)
rtdc_subset %>% summary
rtdc_subset %>% subset(Unique_ID = "AngelaS030317MonocytesDotarem")
rtdc_subset %>% subset(Unique_ID == "AngelaS030317MonocytesDotarem")
?mutate
?merge
make_differences_df <- function(rtdc_data) {
controls  <- subset(rtdc_data, Protocol='Control')
treatments <- subset(rtdc_data, Protocol='Treatment')
df_merge <- merge(controls, treatments, by='Unique_ID', suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc_data)
whos()
who()
ls()
rtdc_diff <- make_differences_df(rtdc)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol='Control')
treatments <- subset(rtdc, Protocol='Treatment')
df_merge <- merge(controls, treatments, by='Unique_ID', suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
rtdc %>% head()
rtdc_diff %>% head()
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol='Control')
treatments <- subset(rtdc, Protocol='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Protocol', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
rtdc_diff <- make_differences_df(rtdc)
rtdc_diff %>% head()
rtdc_subset %>% subset(Unique_ID == "AngelaS030317MonocytesDotarem")
rtdc %>% subset(Unique_ID == "AngelaS030317MonocytesDotarem")
rtdc_diff %>% head(n=20)
controls  <- subset(rtdc, Protocol='Control')
treatments <- subset(rtdc, Protocol='Treatment')
head(controls)
head(treatments)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Protocol', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
head(rtdc_diff)
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
controls.head()
controls %>% head
treatments %>% head
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
head(rtdc_diff)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
df_merge <- df_merge[, -c('Protocol_ctl', 'Protocol_tmt')]
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
df_merge <- subset(df_merge, select= -c('Protocol_ctl', 'Protocol_tmt')
return(df_merge)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
df_merge <- subset(df_merge, select = -c('Protocol_ctl', 'Protocol_tmt'))
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
df_merge <- subset(df_merge, select = -c(Protocol_ctl, Protocol_tmt))
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
rtdc_diff %>% head(n=20)
make_differences_df <- function(rtdc) {
controls  <- subset(rtdc, Protocol=='Control')
treatments <- subset(rtdc, Protocol=='Treatment')
df_merge <- merge(controls, treatments, by=c('Unique_ID', 'Subject', 'Date', 'Cell_Type', 'Contrast_Agent', 'Parameter', 'Statistic'), suffixes = c('_ctl', '_tmt')) %>% mutate(diff = Value_ctl - Value_tmt)
df_merge <- subset(df_merge, select = -c(Protocol_ctl, Protocol_tmt))
return(df_merge)
}
rtdc_diff <- make_differences_df(rtdc)
save(file = 'df_differences.RData', list=c('rtdc_diff'))
